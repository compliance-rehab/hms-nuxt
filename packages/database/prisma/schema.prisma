datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("MIGRATION_DATABASE_URL") // <-- ADD THIS LINE
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/zod"
  createInputTypes = false
  addIncludeType   = false
  addSelectType    = false
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                 String                  @id @default(cuid())
  email              String                  @unique
  emailVerified      Boolean                 @default(false)
  role               UserRole                @default(USER)
  name               String?
  avatarUrl          String?
  createdAt          DateTime                @default(now())
  hashedPassword     String?
  onboardingComplete Boolean                 @default(false)
  oauthAccounts      UserOauthAccount[]
  sessions           UserSession[]
  memberships        TeamMembership[]
  verificationtokens UserVerificationToken[]
  oneTimePasswords   UserOneTimePassword[]
}

model UserSession {
  id             String   @id
  userId         String
  expiresAt      DateTime
  impersonatorId String?
  user           User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model UserOauthAccount {
  id             String @id @default(cuid())
  providerId     String
  providerUserId String
  userId         String
  user           User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([providerId, providerUserId])
}

model UserVerificationToken {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  expires DateTime

  @@index([userId])
}

enum UserOneTimePasswordType {
  SIGNUP
  LOGIN
  PASSWORD_RESET
}

model UserOneTimePassword {
  id         String                  @id @default(cuid())
  userId     String
  user       User                    @relation(references: [id], fields: [userId], onDelete: Cascade)
  code       String
  type       UserOneTimePasswordType
  identifier String
  expires    DateTime
}

model Team {
  id           String           @id @default(cuid())
  name         String
  avatarUrl    String?
  memberships  TeamMembership[]
  subscription Subscription?
  invitations  TeamInvitation[]
  teamTasks    TeamTask[]
}

enum TeamMemberRole {
  MEMBER
  OWNER
}

model TeamMembership {
  id        String         @id @default(cuid())
  team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      TeamMemberRole @default(MEMBER)
  isCreator Boolean        @default(false)

  @@unique([teamId, userId])
}

model TeamInvitation {
  id        String         @id @default(cuid())
  team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  email     String
  role      TeamMemberRole @default(MEMBER)
  createdAt DateTime       @default(now())
  expiresAt DateTime       @updatedAt

  @@unique([teamId, email])
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAUSED
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  EXPIRED
}

model Subscription {
  id              String             @id
  team            Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId          String             @unique
  customerId      String
  status          SubscriptionStatus
  planId          String
  variantId       String
  nextPaymentDate DateTime?
}

enum Status {
  Planned
  In_Progress @map("In Progress")
  Implemented
  Verified
  Blocked
  Remediation
  NA @map("N/A")
  Backlog
}

model Function {
  id        String     @id
  createdAt DateTime   @default(now()) @map("created_at")
  name      String     @unique
  categories Category[]
}

model Category {
  id          String        @id
  createdAt   DateTime      @default(now()) @map("created_at")
  name        String
  function    String
  functionRef Function      @relation(fields: [function], references: [id])
  subcategories Subcategory[]

  @@index([function])
}

model Subcategory {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  name      String
  category  String
  categoryRef Category @relation(fields: [category], references: [id])
  tasks     Task[]

  @@index([category])
}

model Task {
  id          String     @id
  createdAt   DateTime   @default(now()) @map("created_at")
  name        String
  subcategory String
  taskSimple  String?    @map("task_simple")
  subcategoryRef Subcategory @relation(fields: [subcategory], references: [id])
  teamTasks   TeamTask[]
  controlTasks ControlTasks[]

  @@index([subcategory])
}

model TeamTask {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now()) @map("created_at")
  task      String
  team      String
  Status    Status   @default(Planned) @map("Status")
  taskRef   Task     @relation(fields: [task], references: [id])
  teamRef   Team     @relation(fields: [team], references: [id])

  @@unique([team, task])
  @@index([task])
  @@index([team])
}

model Control {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  name      String
  type      String
  standard  String?
  tasks     ControlTasks[]
}

model ControlTasks {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  task      String
  control   String
  taskRef   Task     @relation(fields: [task], references: [id])
  controlRef Control @relation(fields: [control], references: [id])

  @@index([task])
  @@index([control])
}

model Risk {
  id                BigInt   @id @default(autoincrement())
  createdAt         DateTime @default(now()) @map("created_at")
  name              String
  description       String
  riskGroups        String   @map("risk_groups")
  securityPrinciples String  @map("security_principles")
}

model Standard {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
}
